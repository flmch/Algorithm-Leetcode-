int bsearch(int A[],int st, int ed, int target){
    if(st==ed){
        return target==A[st]?st:-1;
    }else if(st+1==ed){
        if(target==A[st]){return st;}
        else if(target==A[ed]){return ed;}
        else{return -1;}
    }else{
        int mid=(st+ed)/2;
        if(target==A[mid]){return mid;}
        else if(target<A[mid]){
            return bsearch(A,st,mid,target);
        }else{
            return bsearch(A,mid,ed,target);
        }
    }
}

int searchpivot(int A[], int st, int ed){
    int mid=(st+ed)/2;
    if(A[mid]>=A[mid+1]){
        return mid;
    }else if(A[mid]<A[0]){
        return searchpivot(A,st,mid);
    }else{
        return searchpivot(A,mid,ed);
    }
}

class Solution {
public:
    int search(int A[], int n, int target) {
        if(n==0){return -1;}
        else if(n==1){
            return target==A[0]?0:-1;
        }else{
            if(A[0]<A[n-1]){
                if(target<A[0]&&target>A[n-1]){
                    return -1;
                }else{
                    return bsearch(A,0,n-1,target);
                }
            }else{
                int pivot=searchpivot(A,0,n-1);
                if(target>=A[0]){
                    return bsearch(A,0,pivot,target);
                }else{
                    return bsearch(A,pivot+1,n-1,target);
                }
            }
        }
    }
};
