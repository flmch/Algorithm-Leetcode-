/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

void inorder(TreeNode *root, int &sum){
     if(!root->left&&!root->right){
         sum+=root->val;
     }else{
        if(root->left){
            root->left->val+=root->val*10;
            inorder(root->left, sum);
        }
        if(root->right){
            root->right->val+=root->val*10;
            inorder(root->right, sum);
        }     
     }
} 
 
class Solution {
public:
    int sumNumbers(TreeNode *root) {
        if(!root){return 0;}
        int sum=0;
        inorder(root,sum);
        
        return sum;
    }
};


//C++ solution 2 (faster)
 void getSum(TreeNode* head, int &sum, int &total){
     sum = 10*sum + head->val;
     if(!head->left&&!head->right){
         total += sum;
     }else{
         if(head->left) getSum(head->left,sum,total);
         if(head->right) getSum(head->right,sum,total);
     }
     sum = (sum - head->val)/10;
 }
 
class Solution {
public:
    int sumNumbers(TreeNode *root) {
        if(!root){
            return 0;
        }else{
            int sum=0, total=0;
            getSum(root, sum, total);
            return total;
        }
    }
};
