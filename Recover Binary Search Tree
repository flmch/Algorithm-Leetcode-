/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 void recover(TreeNode *root, vector<TreeNode*> &arr){
      
      if(root->left){
          recover(root->left,arr);
      }
      
      if(arr.size()==0){
          arr.push_back(root);
      }else if(arr.size()==1){
          arr.push_back(root);
            if(arr[1]->val<=arr[0]->val){
                arr.push_back(arr[0]);
                arr.push_back(arr[1]);
            }          
      }else{ 
            arr[0]=arr[1];
            arr[1]=root;
            if(arr[1]->val<=arr[0]->val){
                arr.push_back(arr[0]);
                arr.push_back(arr[1]);
            }
      }
      
      if(root->right){
          recover(root->right,arr);
      }

 }
 
 
class Solution {
public:
    void recoverTree(TreeNode *root) {
            vector<TreeNode*> nodearray;
            recover(root,nodearray);
            if(nodearray.size()==6){
                int swap=nodearray[2]->val;
                nodearray[2]->val=nodearray[5]->val;
                nodearray[5]->val=swap; 
            }else{
                int swap=nodearray[2]->val;
                nodearray[2]->val=nodearray[3]->val;
                nodearray[3]->val=swap;                 
            }
    }
};
