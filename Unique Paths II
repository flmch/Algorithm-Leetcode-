//****************************************************
//C++

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        
        int **arr=new int* [m];
        for(int i=0;i<m;i++){
            arr[i]=new int[n];
        }
        
        int initiate=1;
        for(int i=0;i<m;i++){
            if(obstacleGrid[i][0]==1){
                initiate=0;
            }
            arr[i][0]=initiate;
        }
        
        initiate=1;
        for(int i=0;i<n;i++){
            if(obstacleGrid[0][i]==1){
                initiate=0;
            }
            arr[0][i]=initiate;
        }        
        
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if(obstacleGrid[i][j]==1){
                    arr[i][j]=0;
                }else{
                    arr[i][j]=arr[i][j-1]+arr[i-1][j];
                }
            }
        }
        
        return arr[m-1][n-1];
    }
};

//****************************************************
//Javascript

/**
 * @param {number[][]} obstacleGrid
 * @returns {number}
 */
var uniquePathsWithObstacles = function(obstacleGrid) {
    var m = obstacleGrid.length;
    var n = obstacleGrid[0].length;
    
    var dynam = [[]];
    
    for(var j=0;j<m;j++){
        var temp = new Array(n);
        for(var t=0;t<n;t++){
            temp[t]=0;
        }
        dynam[j] = temp;
    }
    
    
    for(i=0;i<n;i++){
        if(obstacleGrid[0][i] === 0){
            dynam[0][i] = 1;
        }else{
            break;
        }
    }
    for(j=0;j<m;j++){
        if(obstacleGrid[j][0] === 0){
            dynam[j][0] = 1;
        }else{
            break;
        }
    } 
    
    
    for(j=1;j<m;j++){
        for(i=1;i<n;i++){
            if(obstacleGrid[j][i]==1){
                dynam[j][i] = 0;
            }else{
                dynam[j][i] = dynam[j-1][i] + dynam[j][i-1];
            }
        }
    }
    
    return dynam[m-1][n-1];
};
