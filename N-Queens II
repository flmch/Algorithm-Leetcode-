bool checkposition(vector<string> &flag,int row,int col,int n){
     if(row==0){
         return true;
     }else{
         for(int k=0;k<=row-1;k++){
             if(flag[k][col]=='Q'){
                 return false;
             }
         }
         int i=row,j=col;
         while(i-1>=0&&j-1>=0){
             if(flag[i-1][j-1]=='Q'){
                 return false;
             }
             i--;
             j--;
         }
         i=row,j=col;
         while(i-1>=0&&j+1<=n-1){
             if(flag[i-1][j+1]=='Q'){
                 return false;
             }
             i--;
             j++;
         }
         return true;
     }
}

void getsolution(int row, int n, int &result, vector<string> &temp){
        for(int i=0;i<n;i++){
            if(row==n-1&&checkposition(temp,row,i,n)){
                temp[row][i]='Q';
                result++;
                temp[row][i]='.';
            }else if(row==0){
                temp[row][i]='Q';
                getsolution(row+1,n,result,temp);
                temp[row][i]='.';
            }else{
                if(checkposition(temp,row,i,n)){
                    temp[row][i]='Q';                    
                    getsolution(row+1,n,result,temp);
                    temp[row][i]='.';                    
                }
            }
        }
}

class Solution {
public:
    int totalNQueens(int n) {
        string eachrow(n,'.');
        vector<string> temp(n,eachrow);
        int result=0;
        
        if(n==0||n==2||n==3){
            return result;
        }
        
        getsolution(0,n,result,temp);
        
        return result;        
    }
};
