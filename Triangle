//C++
class Solution {
public:
    int minimumTotal(vector<vector<int> > &triangle) {
        int len=triangle.size();
        if(len==0){return 0;}
        if(len==1){return triangle[0][0];}
        
        for(int i=len-2;i>=0;i--){
            for(int j=0;j<=i;j++){
                triangle[i][j]=triangle[i][j]+(triangle[i+1][j]<triangle[i+1][j+1]?triangle[i+1][j]:triangle[i+1][j+1]);
            }
        }
        
        return triangle[0][0];
    }
};

//Javascript
/**
 * @param {number[][]} triangle
 * @return {number}
 */
var minimumTotal = function(triangle) {
    var track =[];
    var len = triangle.length;
    if(len == 1){
        return triangle[0][0];
    }else{
        track.push(triangle[0][0]+triangle[1][0]);
        track.push(triangle[0][0]+triangle[1][1]);
        for(var i=2;i<len;i++){
            track.splice(0,0,(track[0] + triangle[i][0]));
            for(var j=1;j<i;j++){
                track[j] = Math.min(track[j],track[j+1])+triangle[i][j];
            }
            track[i] += triangle[i][i];
        }
        var result = track[0];
        for(i=1;i<len;i++){
            result = Math.min(result, track[i]);
        }
        
        return result;
    }
};
